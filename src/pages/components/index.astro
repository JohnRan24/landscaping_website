---
import Layout from '@layouts/Layout.astro';
import Features from '@components/sections/Features.astro';
import { featureLists } from '@data/features';
import CtaBanner from '@components/sections/CtaBanner.astro';
import TeamGrid from '@components/sections/Gallery.astro';

const seoTitle = "Component Library - Titan Core";
const seoDescription = "Explore the complete component library of Titan Core, a modern, high-performance Astro theme for developer portfolios and documentation sites.";

// Define the component sections for the navigation
const componentSections = [
    { id: 'hero', name: 'Hero', icon: 'layout' },
    { id: 'innerHero', name: 'Inner Hero', icon: 'layout-template' },
    { id: 'features', name: 'Features', icon: 'package' },
    { id: 'recentPosts', name: 'Recent Posts', icon: 'file-text' },
    { id: 'splitPanel', name: 'Split Panel', icon: 'columns' },
    { id: 'ctaBanner', name: 'CTA Banner', icon: 'megaphone' },
    { id: 'logos', name: 'Logos', icon: 'briefcase' },
    { id: 'stats', name: 'Stats', icon: 'bar-chart' },
    { id: 'faqs', name: 'FAQs', icon: 'help-circle' },
    { id: 'teamGrid', name: 'Team Grid', icon: 'users' }
];

// Hero Component Content

// Inner Hero Component Content


// Features Component Content
const featuresSection = {
    eyebrow: "COMPONENT FEATURES",
    title: "Showcase Product Features & Benefits",
    description: "The Features component is ideal for highlighting key features, benefits, or services in a visually appealing grid layout with icons and descriptions.",
    features: featureLists.main.features,
    button: {
        text: "View All Features",
        link: "/features",
        variant: "primary" as const
    }
}

// Footer CTA Content
const FooterCta = {
    eyebrow: "GET STARTED TODAY",
    title: 'Start Building With Titan Core',
    description: 'Titan Core is open-source and constantly improving. Join our community of developers to contribute, get support, or showcase what you\'ve built.',
    hideCta: false,
    button: {
        text: 'Download Titan Core',
        link: 'https://github.com/titan-studio-themes/titan-core',
        target: '_blank'
    }
}

// Split Panel Component Content

// Stats Component Content

// CTA Banner Component Content
const mainCta = {
    eyebrow: "CALL TO ACTION",
    title: "Drive User Engagement",
    description: "The CTA Banner component is designed to convert visitors into customers with compelling headlines, persuasive copy, and prominent call-to-action buttons.",
    button: {
        text: "Take Action Now",
        link: "/contact",
        variant: "primary" as const,
        target: "_self" as const
    }
};

// Logos Component Content

// FAQs Component Content

// Recent Posts Component Content
const recentPostsSection = {
    eyebrow: "CONTENT MARKETING",
    title: "Showcase Your Latest Content",
    description: "The RecentPosts component automatically displays your latest blog posts or articles, helping drive traffic to your content and keeping your site fresh and engaging.",
    button: {
        text: "View All Posts",
        link: "/blog",
        variant: "primary" as const
    }
}

---

<Layout footerCta={FooterCta} title={seoTitle} description={seoDescription}>
    <!-- Floating Side Navigation -->
    <div class="fixed left-4 top-1/2 transform -translate-y-1/2 z-50 hidden lg:block">
        <div class="bg-white rounded-lg shadow-xl p-3 w-52">
            <div class="flex items-center mb-3 pb-2 border-b">
                <h3 class="font-bold text-sm">Components</h3>
            </div>
            <nav>
                <ul class="space-y-1">
                    {componentSections.map(section => (
                        <li>
                            <a 
                                href={`#${section.id}`} 
                                class="component-nav-link flex items-center p-1.5 rounded-md hover:bg-gray-100 transition-colors text-xs"
                                data-section={section.id}
                            >
                                <span class="icon mr-1.5" data-lucide={section.icon}></span>
                                <span>{section.name}</span>
                            </a>
                        </li>
                    ))}
                </ul>
            </nav>
        </div>
    </div>

    <!-- Component Sections -->
    
    
    <section id="features" class="component-section relative mb-16">
        <div class="component-wrapper relative transition-all duration-500">
            <div class="component-label hidden absolute -bottom-6 left-1/2 transform -translate-x-1/2 bg-primary text-white py-1 px-3 rounded-md text-xs font-medium z-10 shadow-md">
                Features Component
            </div>
            <Features content={featuresSection} padding="base" background="light" />
        </div>
    </section>
    
    
    
    <section id="ctaBanner" class="component-section relative mb-16">
        <div class="component-wrapper relative transition-all duration-500">
            <div class="component-label hidden absolute -bottom-6 left-1/2 transform -translate-x-1/2 bg-primary text-white py-1 px-3 rounded-md text-xs font-medium z-10 shadow-md">
                CTA Banner Component
            </div>
            <CtaBanner content={mainCta} variant="contained" background="light" padding="base" />
        </div>
    </section>
    
    
    
    <section id="teamGrid" class="component-section relative mb-16">
        <div class="component-wrapper relative transition-all duration-500">
            <div class="component-label hidden absolute -bottom-6 left-1/2 transform -translate-x-1/2 bg-primary text-white py-1 px-3 rounded-md text-xs font-medium z-10 shadow-md">
                Team Grid Component
            </div>
            <TeamGrid padding="base" />
        </div>
    </section>
</Layout>

<script>
    // Wait for the document to be fully loaded
    document.addEventListener('DOMContentLoaded', () => {
        // Get all section elements
        const sections = document.querySelectorAll('.component-section');
        const navLinks = document.querySelectorAll('.component-nav-link');
        const componentWrappers = document.querySelectorAll('.component-wrapper');
        const componentLabels = document.querySelectorAll('.component-label');
        
        // Initialize Lucide icons
        // @ts-ignore - Lucide is loaded globally but TypeScript doesn't know about it
        if (typeof window.lucide !== 'undefined') {
            // @ts-ignore
            window.lucide.createIcons();
        }
        
        // Function to update active navigation link and component
        const updateActiveLink = () => {
            // Get current scroll position
            const scrollPosition = window.scrollY;
            
            // Find the current section
            sections.forEach((section, index) => {
                const sectionTop = section.getBoundingClientRect().top + window.scrollY;
                const sectionHeight = section.getBoundingClientRect().height;
                const sectionId = section.getAttribute('id');
                
                if (sectionId && scrollPosition >= sectionTop - 200 && scrollPosition < sectionTop + sectionHeight - 200) {
                    // Remove active class from all links
                    navLinks.forEach(link => {
                        link.classList.remove('bg-primary', 'text-white');
                    });
                    
                    // Reset all component wrappers
                    componentWrappers.forEach((wrapper, i) => {
                        wrapper.classList.remove('border-4', 'border-primary', 'shadow-lg', 'bg-white');
                        componentLabels[i].classList.add('hidden');
                    });
                    
                    // Add active class to current section link
                    const activeLink = document.querySelector(`.component-nav-link[data-section="${sectionId}"]`);
                    if (activeLink) {
                        activeLink.classList.add('bg-primary', 'text-white');
                    }
                    
                    // Highlight active component
                    const activeWrapper = componentWrappers[index];
                    const activeLabel = componentLabels[index];
                    if (activeWrapper) {
                        activeWrapper.classList.add('border-4', 'border-primary', 'shadow-lg', 'bg-white');
                        activeLabel.classList.remove('hidden');
                    }
                }
            });
        };
        
        // Add scroll event listener
        window.addEventListener('scroll', updateActiveLink);
        
        // Initial call to set active link on page load
        updateActiveLink();
        
        // Add smooth scrolling for navigation links
        navLinks.forEach(link => {
            link.addEventListener('click', (e) => {
                e.preventDefault();
                const href = link.getAttribute('href');
                if (!href) return;
                
                const targetId = href.substring(1);
                const targetSection = document.getElementById(targetId);
                
                if (targetSection) {
                    const targetTop = targetSection.getBoundingClientRect().top + window.scrollY;
                    window.scrollTo({
                        top: targetTop - 100,
                        behavior: 'smooth'
                    });
                }
            });
        });
    });
</script>

<style>
    .component-section {
        scroll-margin-top: 100px;
    }
    
    .component-wrapper {
        position: relative;
        z-index: 1;
    }
</style>